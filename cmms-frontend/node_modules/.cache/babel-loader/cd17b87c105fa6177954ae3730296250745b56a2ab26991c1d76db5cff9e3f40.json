{"ast":null,"code":"var _jsxFileName = \"/Users/haxordee/smexy-cmms/cmms-frontend/src/components/ProtectedRoute.js\",\n  _s = $RefreshSig$();\nimport React, { useContext, useEffect, useState } from 'react';\nimport { Navigate } from 'react-router-dom';\nimport { AuthContext } from '../context/AuthContext';\nimport axios from '../api/axiosConfig';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProtectedRoute = ({\n  children\n}) => {\n  _s();\n  const {\n    user,\n    login\n  } = useContext(AuthContext); // Fetch user and login method from context\n  const [loading, setLoading] = useState(true); // Loading state to handle async auth check\n\n  useEffect(() => {\n    const verifyUser = async () => {\n      try {\n        const response = await axios.get('/api/auth/verify', {\n          withCredentials: true\n        });\n        if (response.data.user) {\n          login(response.data.user); // Login and set the user in context if token is valid\n        }\n      } catch (error) {\n        console.error('User verification failed:', error); // Handle errors if the user is not authenticated\n      } finally {\n        setLoading(false); // Stop loading after verification is complete\n      }\n    };\n    if (!user) {\n      verifyUser(); // If the user is not in context, verify the user via the backend\n    } else {\n      setLoading(false); // If user is already in context, stop loading\n    }\n  }, [user, login]);\n\n  // Show a loading state while the user is being verified\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Redirect to login if user is not authenticated\n  return user ? children : /*#__PURE__*/_jsxDEV(Navigate, {\n    to: \"/login\",\n    replace: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 28\n  }, this);\n};\n_s(ProtectedRoute, \"yfZvZjTBNEHB6Ro/8bOEBeAPee0=\");\n_c = ProtectedRoute;\nexport default ProtectedRoute;\nvar _c;\n$RefreshReg$(_c, \"ProtectedRoute\");","map":{"version":3,"names":["React","useContext","useEffect","useState","Navigate","AuthContext","axios","jsxDEV","_jsxDEV","ProtectedRoute","children","_s","user","login","loading","setLoading","verifyUser","response","get","withCredentials","data","error","console","fileName","_jsxFileName","lineNumber","columnNumber","to","replace","_c","$RefreshReg$"],"sources":["/Users/haxordee/smexy-cmms/cmms-frontend/src/components/ProtectedRoute.js"],"sourcesContent":["import React, { useContext, useEffect, useState } from 'react';\nimport { Navigate } from 'react-router-dom';\nimport { AuthContext } from '../context/AuthContext';\nimport axios from '../api/axiosConfig';\n\nconst ProtectedRoute = ({ children }) => {\n  const { user, login } = useContext(AuthContext);  // Fetch user and login method from context\n  const [loading, setLoading] = useState(true);  // Loading state to handle async auth check\n\n  useEffect(() => {\n    const verifyUser = async () => {\n      try {\n        const response = await axios.get('/api/auth/verify', { withCredentials: true });\n        if (response.data.user) {\n          login(response.data.user);  // Login and set the user in context if token is valid\n        }\n      } catch (error) {\n        console.error('User verification failed:', error);  // Handle errors if the user is not authenticated\n      } finally {\n        setLoading(false);  // Stop loading after verification is complete\n      }\n    };\n\n    if (!user) {\n      verifyUser();  // If the user is not in context, verify the user via the backend\n    } else {\n      setLoading(false);  // If user is already in context, stop loading\n    }\n  }, [user, login]);\n\n  // Show a loading state while the user is being verified\n  if (loading) {\n    return <div>Loading...</div>;\n  }\n\n  // Redirect to login if user is not authenticated\n  return user ? children : <Navigate to=\"/login\" replace />;\n};\n\nexport default ProtectedRoute;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,UAAU,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC9D,SAASC,QAAQ,QAAQ,kBAAkB;AAC3C,SAASC,WAAW,QAAQ,wBAAwB;AACpD,OAAOC,KAAK,MAAM,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvC,MAAMC,cAAc,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACvC,MAAM;IAAEC,IAAI;IAAEC;EAAM,CAAC,GAAGZ,UAAU,CAACI,WAAW,CAAC,CAAC,CAAE;EAClD,MAAM,CAACS,OAAO,EAAEC,UAAU,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAE;;EAE/CD,SAAS,CAAC,MAAM;IACd,MAAMc,UAAU,GAAG,MAAAA,CAAA,KAAY;MAC7B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMX,KAAK,CAACY,GAAG,CAAC,kBAAkB,EAAE;UAAEC,eAAe,EAAE;QAAK,CAAC,CAAC;QAC/E,IAAIF,QAAQ,CAACG,IAAI,CAACR,IAAI,EAAE;UACtBC,KAAK,CAACI,QAAQ,CAACG,IAAI,CAACR,IAAI,CAAC,CAAC,CAAE;QAC9B;MACF,CAAC,CAAC,OAAOS,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC,CAAC,CAAE;MACtD,CAAC,SAAS;QACRN,UAAU,CAAC,KAAK,CAAC,CAAC,CAAE;MACtB;IACF,CAAC;IAED,IAAI,CAACH,IAAI,EAAE;MACTI,UAAU,CAAC,CAAC,CAAC,CAAE;IACjB,CAAC,MAAM;MACLD,UAAU,CAAC,KAAK,CAAC,CAAC,CAAE;IACtB;EACF,CAAC,EAAE,CAACH,IAAI,EAAEC,KAAK,CAAC,CAAC;;EAEjB;EACA,IAAIC,OAAO,EAAE;IACX,oBAAON,OAAA;MAAAE,QAAA,EAAK;IAAU;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAC9B;;EAEA;EACA,OAAOd,IAAI,GAAGF,QAAQ,gBAAGF,OAAA,CAACJ,QAAQ;IAACuB,EAAE,EAAC,QAAQ;IAACC,OAAO;EAAA;IAAAL,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAC3D,CAAC;AAACf,EAAA,CAhCIF,cAAc;AAAAoB,EAAA,GAAdpB,cAAc;AAkCpB,eAAeA,cAAc;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}