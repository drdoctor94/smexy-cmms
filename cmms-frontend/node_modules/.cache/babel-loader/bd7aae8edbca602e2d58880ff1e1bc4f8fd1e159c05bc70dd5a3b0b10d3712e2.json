{"ast":null,"code":"import React,{useEffect,useState}from'react';import{Table,TableBody,TableCell,TableContainer,TableHead,TableRow,Paper,Button,Typography}from'@mui/material';import EditUserModal from'./EditUserModal';// Import the edit modal component\nimport AddUserModal from'./AddUserModal';// Import the add modal component\nimport axios from'../api/axiosConfig';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const UserManagement=()=>{const[users,setUsers]=useState([]);const[selectedUser,setSelectedUser]=useState(null);// To store the user selected for editing\nconst[editModalOpen,setEditModalOpen]=useState(false);const[addModalOpen,setAddModalOpen]=useState(false);// To open add modal\nconst[currentUserRole,setCurrentUserRole]=useState('');// To store the current user's role\nconst[isAuthorized,setIsAuthorized]=useState(false);// To check if user is authorized\nconst[isLoading,setIsLoading]=useState(true);// To show loading state\nconst[error,setError]=useState('');// To display errors\nconst fetchUsers=async()=>{try{const response=await axios.get('/api/users');setUsers(response.data);}catch(error){console.error(error);}};const fetchCurrentUser=async()=>{try{const response=await axios.get('/api/auth/me');const{role}=response.data.user;// Extract user role\nsetCurrentUserRole(role);setIsAuthorized(role==='Admin');setIsLoading(false);// Data has been loaded, stop loading\n}catch(error){console.error('Failed to fetch current user:',error);setError('Failed to fetch current user.');setIsLoading(false);// Stop loading even in case of error\n}};useEffect(()=>{fetchCurrentUser();// Fetch the current user info when the component mounts\n},[]);useEffect(()=>{if(isAuthorized){fetchUsers();// Fetch users only if the current user is an Admin\n}},[isAuthorized]);const handleEditUser=user=>{setSelectedUser(user);setEditModalOpen(true);// Open the modal when clicking the edit button\n};const handleAddUser=()=>{setAddModalOpen(true);// Open the add modal when clicking the add button\n};// Close the edit modal\nconst handleCloseEditModal=()=>{setEditModalOpen(false);setSelectedUser(null);// Clear the selected user after closing\n};// Close the add modal\nconst handleCloseAddModal=()=>{setAddModalOpen(false);};// Callback function to refresh the user list after editing or adding a user\nconst handleRefreshUsers=()=>{fetchUsers();// Refresh the user list\n};// Show loading state until user role is fetched\nif(isLoading){return/*#__PURE__*/_jsx(Typography,{children:\"Loading...\"});}// Show access denied message if the user is not an admin\nif(!isAuthorized){return/*#__PURE__*/_jsx(Typography,{children:error||'You do not have access to view this page.'});}return/*#__PURE__*/_jsxs(TableContainer,{component:Paper,children:[/*#__PURE__*/_jsx(Button,{variant:\"contained\",color:\"primary\",onClick:handleAddUser,children:\"Add New User\"}),/*#__PURE__*/_jsxs(Table,{children:[/*#__PURE__*/_jsx(TableHead,{children:/*#__PURE__*/_jsxs(TableRow,{children:[/*#__PURE__*/_jsx(TableCell,{children:\"Username\"}),/*#__PURE__*/_jsx(TableCell,{children:\"Role\"}),/*#__PURE__*/_jsx(TableCell,{children:\"First Name\"}),/*#__PURE__*/_jsx(TableCell,{children:\"Last Name\"}),/*#__PURE__*/_jsx(TableCell,{children:\"Actions\"})]})}),/*#__PURE__*/_jsx(TableBody,{children:users.map(user=>/*#__PURE__*/_jsxs(TableRow,{children:[/*#__PURE__*/_jsx(TableCell,{children:user.username}),/*#__PURE__*/_jsx(TableCell,{children:user.role}),/*#__PURE__*/_jsx(TableCell,{children:user.firstName}),/*#__PURE__*/_jsx(TableCell,{children:user.lastName}),/*#__PURE__*/_jsx(TableCell,{children:/*#__PURE__*/_jsx(Button,{variant:\"contained\",color:\"secondary\",onClick:()=>handleEditUser(user),children:\"Edit\"})})]},user._id))})]}),editModalOpen&&selectedUser&&/*#__PURE__*/_jsx(EditUserModal,{open:editModalOpen,handleClose:handleCloseEditModal,user:selectedUser,onSave:handleRefreshUsers// Pass the refresh function to trigger after save\n}),addModalOpen&&/*#__PURE__*/_jsx(AddUserModal,{open:addModalOpen,handleClose:handleCloseAddModal,onSave:handleRefreshUsers// Pass the refresh function to trigger after adding\n})]});};export default UserManagement;","map":{"version":3,"names":["React","useEffect","useState","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","Paper","Button","Typography","EditUserModal","AddUserModal","axios","jsx","_jsx","jsxs","_jsxs","UserManagement","users","setUsers","selectedUser","setSelectedUser","editModalOpen","setEditModalOpen","addModalOpen","setAddModalOpen","currentUserRole","setCurrentUserRole","isAuthorized","setIsAuthorized","isLoading","setIsLoading","error","setError","fetchUsers","response","get","data","console","fetchCurrentUser","role","user","handleEditUser","handleAddUser","handleCloseEditModal","handleCloseAddModal","handleRefreshUsers","children","component","variant","color","onClick","map","username","firstName","lastName","_id","open","handleClose","onSave"],"sources":["/Users/haxordee/smexy-cmms/cmms-frontend/src/pages/UserManagement.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper, Button, Typography } from '@mui/material';\nimport EditUserModal from './EditUserModal'; // Import the edit modal component\nimport AddUserModal from './AddUserModal'; // Import the add modal component\nimport axios from '../api/axiosConfig';\n\nconst UserManagement = () => {\n  const [users, setUsers] = useState([]);\n  const [selectedUser, setSelectedUser] = useState(null); // To store the user selected for editing\n  const [editModalOpen, setEditModalOpen] = useState(false);\n  const [addModalOpen, setAddModalOpen] = useState(false); // To open add modal\n  const [currentUserRole, setCurrentUserRole] = useState(''); // To store the current user's role\n  const [isAuthorized, setIsAuthorized] = useState(false); // To check if user is authorized\n  const [isLoading, setIsLoading] = useState(true); // To show loading state\n  const [error, setError] = useState(''); // To display errors\n\n  const fetchUsers = async () => {\n    try {\n      const response = await axios.get('/api/users');\n      setUsers(response.data);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const fetchCurrentUser = async () => {\n    try {\n      const response = await axios.get('/api/auth/me');\n      const { role } = response.data.user; // Extract user role\n      setCurrentUserRole(role);\n      setIsAuthorized(role === 'Admin');\n      setIsLoading(false); // Data has been loaded, stop loading\n    } catch (error) {\n      console.error('Failed to fetch current user:', error);\n      setError('Failed to fetch current user.');\n      setIsLoading(false); // Stop loading even in case of error\n    }\n  };\n\n  useEffect(() => {\n    fetchCurrentUser(); // Fetch the current user info when the component mounts\n  }, []);\n\n  useEffect(() => {\n    if (isAuthorized) {\n      fetchUsers(); // Fetch users only if the current user is an Admin\n    }\n  }, [isAuthorized]);\n\n  const handleEditUser = (user) => {\n    setSelectedUser(user);\n    setEditModalOpen(true); // Open the modal when clicking the edit button\n  };\n\n  const handleAddUser = () => {\n    setAddModalOpen(true); // Open the add modal when clicking the add button\n  };\n\n  // Close the edit modal\n  const handleCloseEditModal = () => {\n    setEditModalOpen(false);\n    setSelectedUser(null); // Clear the selected user after closing\n  };\n\n  // Close the add modal\n  const handleCloseAddModal = () => {\n    setAddModalOpen(false);\n  };\n\n  // Callback function to refresh the user list after editing or adding a user\n  const handleRefreshUsers = () => {\n    fetchUsers(); // Refresh the user list\n  };\n\n  // Show loading state until user role is fetched\n  if (isLoading) {\n    return <Typography>Loading...</Typography>;\n  }\n\n  // Show access denied message if the user is not an admin\n  if (!isAuthorized) {\n    return <Typography>{error || 'You do not have access to view this page.'}</Typography>;\n  }\n\n  return (\n    <TableContainer component={Paper}>\n      <Button variant=\"contained\" color=\"primary\" onClick={handleAddUser}>\n        Add New User\n      </Button>\n      <Table>\n        <TableHead>\n          <TableRow>\n            <TableCell>Username</TableCell>\n            <TableCell>Role</TableCell>\n            <TableCell>First Name</TableCell>\n            <TableCell>Last Name</TableCell>\n            <TableCell>Actions</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {users.map((user) => (\n            <TableRow key={user._id}>\n              <TableCell>{user.username}</TableCell>\n              <TableCell>{user.role}</TableCell>\n              <TableCell>{user.firstName}</TableCell>\n              <TableCell>{user.lastName}</TableCell>\n              <TableCell>\n                <Button variant=\"contained\" color=\"secondary\" onClick={() => handleEditUser(user)}>\n                  Edit\n                </Button>\n              </TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n\n      {/* Edit User Modal */}\n      {editModalOpen && selectedUser && (\n        <EditUserModal\n          open={editModalOpen}\n          handleClose={handleCloseEditModal}\n          user={selectedUser}\n          onSave={handleRefreshUsers} // Pass the refresh function to trigger after save\n        />\n      )}\n\n      {/* Add User Modal */}\n      {addModalOpen && (\n        <AddUserModal\n          open={addModalOpen}\n          handleClose={handleCloseAddModal}\n          onSave={handleRefreshUsers} // Pass the refresh function to trigger after adding\n        />\n      )}\n    </TableContainer>\n  );\n};\n\nexport default UserManagement;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}