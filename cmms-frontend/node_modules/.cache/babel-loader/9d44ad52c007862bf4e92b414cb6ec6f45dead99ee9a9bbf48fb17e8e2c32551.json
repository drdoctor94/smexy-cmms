{"ast":null,"code":"import React,{useEffect,useState}from'react';import axios from'../api/axiosConfig';import{Typography,Grid}from'@mui/material';import{jsxs as _jsxs,jsx as _jsx}from\"react/jsx-runtime\";const Dashboard=()=>{const[userCount,setUserCount]=useState(0);const[workOrderCount,setWorkOrderCount]=useState(0);const[currentUserRole,setCurrentUserRole]=useState('');useEffect(()=>{// Fetch the current user's role\nconst fetchCurrentUser=async()=>{try{const response=await axios.get('/api/auth/me');setCurrentUserRole(response.data.user.role);}catch(error){console.error('Failed to fetch current user:',error);}};// Fetch user count if the current user is an Admin\nconst fetchUserCount=async()=>{try{const response=await axios.get('/api/users/count');setUserCount(response.data.count);}catch(error){console.error('Failed to fetch user count:',error);}};// Fetch work order count for all users\nconst fetchWorkOrderCount=async()=>{try{const response=await axios.get('/api/work-orders/count');setWorkOrderCount(response.data.count);}catch(error){console.error('Failed to fetch work order count:',error);}};fetchCurrentUser();fetchWorkOrderCount();// Only fetch the user count if the current user is an Admin\nif(currentUserRole==='Admin'){fetchUserCount();}},[currentUserRole]);return/*#__PURE__*/_jsxs(Grid,{container:true,spacing:3,children:[currentUserRole==='Admin'&&/*#__PURE__*/_jsx(Grid,{item:true,xs:12,children:/*#__PURE__*/_jsxs(Typography,{variant:\"h6\",children:[\"Total Users: \",userCount]})}),/*#__PURE__*/_jsx(Grid,{item:true,xs:12,children:/*#__PURE__*/_jsxs(Typography,{variant:\"h6\",children:[\"Total Work Orders: \",workOrderCount]})})]});};export default Dashboard;","map":{"version":3,"names":["React","useEffect","useState","axios","Typography","Grid","jsxs","_jsxs","jsx","_jsx","Dashboard","userCount","setUserCount","workOrderCount","setWorkOrderCount","currentUserRole","setCurrentUserRole","fetchCurrentUser","response","get","data","user","role","error","console","fetchUserCount","count","fetchWorkOrderCount","container","spacing","children","item","xs","variant"],"sources":["/Users/haxordee/smexy-cmms/cmms-frontend/src/pages/Dashboard.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport axios from '../api/axiosConfig';\nimport { Typography, Grid } from '@mui/material';\n\nconst Dashboard = () => {\n  const [userCount, setUserCount] = useState(0);\n  const [workOrderCount, setWorkOrderCount] = useState(0);\n  const [currentUserRole, setCurrentUserRole] = useState('');\n\n  useEffect(() => {\n    // Fetch the current user's role\n    const fetchCurrentUser = async () => {\n      try {\n        const response = await axios.get('/api/auth/me');\n        setCurrentUserRole(response.data.user.role);\n      } catch (error) {\n        console.error('Failed to fetch current user:', error);\n      }\n    };\n\n    // Fetch user count if the current user is an Admin\n    const fetchUserCount = async () => {\n      try {\n        const response = await axios.get('/api/users/count');\n        setUserCount(response.data.count);\n      } catch (error) {\n        console.error('Failed to fetch user count:', error);\n      }\n    };\n\n    // Fetch work order count for all users\n    const fetchWorkOrderCount = async () => {\n      try {\n        const response = await axios.get('/api/work-orders/count');\n        setWorkOrderCount(response.data.count);\n      } catch (error) {\n        console.error('Failed to fetch work order count:', error);\n      }\n    };\n\n    fetchCurrentUser();\n    fetchWorkOrderCount();\n\n    // Only fetch the user count if the current user is an Admin\n    if (currentUserRole === 'Admin') {\n      fetchUserCount();\n    }\n  }, [currentUserRole]);\n\n  return (\n    <Grid container spacing={3}>\n      {/* Conditionally show user count only if the current user is an Admin */}\n      {currentUserRole === 'Admin' && (\n        <Grid item xs={12}>\n          <Typography variant=\"h6\">Total Users: {userCount}</Typography>\n        </Grid>\n      )}\n\n      {/* Show the work order count for all roles */}\n      <Grid item xs={12}>\n        <Typography variant=\"h6\">Total Work Orders: {workOrderCount}</Typography>\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default Dashboard;\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,SAAS,CAAEC,QAAQ,KAAQ,OAAO,CAClD,MAAO,CAAAC,KAAK,KAAM,oBAAoB,CACtC,OAASC,UAAU,CAAEC,IAAI,KAAQ,eAAe,CAAC,OAAAC,IAAA,IAAAC,KAAA,CAAAC,GAAA,IAAAC,IAAA,yBAEjD,KAAM,CAAAC,SAAS,CAAGA,CAAA,GAAM,CACtB,KAAM,CAACC,SAAS,CAAEC,YAAY,CAAC,CAAGV,QAAQ,CAAC,CAAC,CAAC,CAC7C,KAAM,CAACW,cAAc,CAAEC,iBAAiB,CAAC,CAAGZ,QAAQ,CAAC,CAAC,CAAC,CACvD,KAAM,CAACa,eAAe,CAAEC,kBAAkB,CAAC,CAAGd,QAAQ,CAAC,EAAE,CAAC,CAE1DD,SAAS,CAAC,IAAM,CACd;AACA,KAAM,CAAAgB,gBAAgB,CAAG,KAAAA,CAAA,GAAY,CACnC,GAAI,CACF,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAf,KAAK,CAACgB,GAAG,CAAC,cAAc,CAAC,CAChDH,kBAAkB,CAACE,QAAQ,CAACE,IAAI,CAACC,IAAI,CAACC,IAAI,CAAC,CAC7C,CAAE,MAAOC,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,+BAA+B,CAAEA,KAAK,CAAC,CACvD,CACF,CAAC,CAED;AACA,KAAM,CAAAE,cAAc,CAAG,KAAAA,CAAA,GAAY,CACjC,GAAI,CACF,KAAM,CAAAP,QAAQ,CAAG,KAAM,CAAAf,KAAK,CAACgB,GAAG,CAAC,kBAAkB,CAAC,CACpDP,YAAY,CAACM,QAAQ,CAACE,IAAI,CAACM,KAAK,CAAC,CACnC,CAAE,MAAOH,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,CAAEA,KAAK,CAAC,CACrD,CACF,CAAC,CAED;AACA,KAAM,CAAAI,mBAAmB,CAAG,KAAAA,CAAA,GAAY,CACtC,GAAI,CACF,KAAM,CAAAT,QAAQ,CAAG,KAAM,CAAAf,KAAK,CAACgB,GAAG,CAAC,wBAAwB,CAAC,CAC1DL,iBAAiB,CAACI,QAAQ,CAACE,IAAI,CAACM,KAAK,CAAC,CACxC,CAAE,MAAOH,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,mCAAmC,CAAEA,KAAK,CAAC,CAC3D,CACF,CAAC,CAEDN,gBAAgB,CAAC,CAAC,CAClBU,mBAAmB,CAAC,CAAC,CAErB;AACA,GAAIZ,eAAe,GAAK,OAAO,CAAE,CAC/BU,cAAc,CAAC,CAAC,CAClB,CACF,CAAC,CAAE,CAACV,eAAe,CAAC,CAAC,CAErB,mBACER,KAAA,CAACF,IAAI,EAACuB,SAAS,MAACC,OAAO,CAAE,CAAE,CAAAC,QAAA,EAExBf,eAAe,GAAK,OAAO,eAC1BN,IAAA,CAACJ,IAAI,EAAC0B,IAAI,MAACC,EAAE,CAAE,EAAG,CAAAF,QAAA,cAChBvB,KAAA,CAACH,UAAU,EAAC6B,OAAO,CAAC,IAAI,CAAAH,QAAA,EAAC,eAAa,CAACnB,SAAS,EAAa,CAAC,CAC1D,CACP,cAGDF,IAAA,CAACJ,IAAI,EAAC0B,IAAI,MAACC,EAAE,CAAE,EAAG,CAAAF,QAAA,cAChBvB,KAAA,CAACH,UAAU,EAAC6B,OAAO,CAAC,IAAI,CAAAH,QAAA,EAAC,qBAAmB,CAACjB,cAAc,EAAa,CAAC,CACrE,CAAC,EACH,CAAC,CAEX,CAAC,CAED,cAAe,CAAAH,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}