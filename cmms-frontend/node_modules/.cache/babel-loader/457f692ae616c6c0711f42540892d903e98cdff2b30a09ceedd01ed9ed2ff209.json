{"ast":null,"code":"var _jsxFileName = \"/Users/haxordee/smexy-cmms/cmms-frontend/src/pages/Dashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport axios from '../api/axiosConfig';\nimport { Typography, Grid } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Dashboard = () => {\n  _s();\n  const [userCount, setUserCount] = useState(0);\n  const [workOrderCount, setWorkOrderCount] = useState(0);\n  const [currentUserRole, setCurrentUserRole] = useState('');\n  useEffect(() => {\n    // Fetch the current user's role\n    const fetchCurrentUser = async () => {\n      try {\n        const response = await axios.get('/api/auth/me');\n        setCurrentUserRole(response.data.user.role);\n      } catch (error) {\n        console.error('Failed to fetch current user:', error);\n      }\n    };\n\n    // Fetch user count if the current user is an Admin\n    const fetchUserCount = async () => {\n      try {\n        const response = await axios.get('/api/users/count');\n        setUserCount(response.data.count);\n      } catch (error) {\n        console.error('Failed to fetch user count:', error);\n      }\n    };\n\n    // Fetch work order count for all users\n    const fetchWorkOrderCount = async () => {\n      try {\n        const response = await axios.get('/api/work-orders/count');\n        setWorkOrderCount(response.data.count);\n      } catch (error) {\n        console.error('Failed to fetch work order count:', error);\n      }\n    };\n    fetchCurrentUser();\n    fetchWorkOrderCount();\n\n    // Only fetch the user count if the current user is an Admin\n    if (currentUserRole === 'Admin') {\n      fetchUserCount();\n    }\n  }, [currentUserRole]);\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    container: true,\n    spacing: 3,\n    children: [currentUserRole === 'Admin' && /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 12,\n      children: /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        children: [\"Total Users: \", userCount]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 12,\n      children: /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        children: [\"Total Work Orders: \", workOrderCount]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"NEdfl/r9KA0kO2CQMmODSknyKuY=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useEffect","useState","axios","Typography","Grid","jsxDEV","_jsxDEV","Dashboard","_s","userCount","setUserCount","workOrderCount","setWorkOrderCount","currentUserRole","setCurrentUserRole","fetchCurrentUser","response","get","data","user","role","error","console","fetchUserCount","count","fetchWorkOrderCount","container","spacing","children","item","xs","variant","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/haxordee/smexy-cmms/cmms-frontend/src/pages/Dashboard.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport axios from '../api/axiosConfig';\nimport { Typography, Grid } from '@mui/material';\n\nconst Dashboard = () => {\n  const [userCount, setUserCount] = useState(0);\n  const [workOrderCount, setWorkOrderCount] = useState(0);\n  const [currentUserRole, setCurrentUserRole] = useState('');\n\n  useEffect(() => {\n    // Fetch the current user's role\n    const fetchCurrentUser = async () => {\n      try {\n        const response = await axios.get('/api/auth/me');\n        setCurrentUserRole(response.data.user.role);\n      } catch (error) {\n        console.error('Failed to fetch current user:', error);\n      }\n    };\n\n    // Fetch user count if the current user is an Admin\n    const fetchUserCount = async () => {\n      try {\n        const response = await axios.get('/api/users/count');\n        setUserCount(response.data.count);\n      } catch (error) {\n        console.error('Failed to fetch user count:', error);\n      }\n    };\n\n    // Fetch work order count for all users\n    const fetchWorkOrderCount = async () => {\n      try {\n        const response = await axios.get('/api/work-orders/count');\n        setWorkOrderCount(response.data.count);\n      } catch (error) {\n        console.error('Failed to fetch work order count:', error);\n      }\n    };\n\n    fetchCurrentUser();\n    fetchWorkOrderCount();\n\n    // Only fetch the user count if the current user is an Admin\n    if (currentUserRole === 'Admin') {\n      fetchUserCount();\n    }\n  }, [currentUserRole]);\n\n  return (\n    <Grid container spacing={3}>\n      {/* Conditionally show user count only if the current user is an Admin */}\n      {currentUserRole === 'Admin' && (\n        <Grid item xs={12}>\n          <Typography variant=\"h6\">Total Users: {userCount}</Typography>\n        </Grid>\n      )}\n\n      {/* Show the work order count for all roles */}\n      <Grid item xs={12}>\n        <Typography variant=\"h6\">Total Work Orders: {workOrderCount}</Typography>\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default Dashboard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}